<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0" metadata-complete="false">

	<!-- 激活Tomcat的defaultServlet来处理静态文件 -->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>/static/fonts/*</url-pattern>
		<url-pattern>/resources/*</url-pattern>
		<url-pattern>/upload/*</url-pattern>
		
		<url-pattern>*.jpg</url-pattern>
		<url-pattern>*.png</url-pattern>
		<url-pattern>*.gif</url-pattern>
		<url-pattern>*.js</url-pattern>
		<url-pattern>*.css</url-pattern>
		<url-pattern>*.ico</url-pattern>
	</servlet-mapping>

	<!-- 指定Spring的配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:/config/spring/web-context.xml
		</param-value>
	</context-param>

	<!-- 防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面 -->
	<!-- 详细描述见http://blog.csdn.net/jadyer/article/details/11991457 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	 <listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener> 

	<!-- 可以使用RequestContextHolder.currentRequestAttributes() 获取到请求的attr -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

 <!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->
    <!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->
    <!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->
    <!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->
    <!-- <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <async-supported>true</async-supported>
        <init-param>
            该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping> -->
	<!-- 编码过滤器 -->
	
	<!-- 编码过滤器 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 记录访问日志 -->
	<!-- <filter>
		<filter-name>AccessLogFilter</filter-name>
		<filter-class>com.rt.shop.filter.AccessLogFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>blackListURL</param-name>
			<param-value>/static/**,*.js,*.css,*.jpg,*.gif,*.png,*.ico,/druid/**,/notlogin,/ErrorHandler,/captcha</param-value>
		</init-param>
		<init-param>
			<param-name>whiteListURL</param-name>
			<param-value>/**</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>AccessLogFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
	</filter-mapping> -->
	<!--druid 监控 -->
	<filter>
		<filter-name>DruidWebStatFilter</filter-name>
		<filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>exclusions</param-name>
			<param-value>/static/*,*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
		</init-param>
		<init-param>
			<param-name>profileEnable</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>principalSessionName</param-name>
			<param-value>loginUser</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>DruidWebStatFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- druid监控 -->
	<servlet>
		<servlet-name>DruidStatView</servlet-name>
		<servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
		<async-supported>true</async-supported>
		<!-- <init-param>
			用户名
			<param-name>loginUsername</param-name>
			<param-value>admin</param-value>
		</init-param>
		<init-param>
			密码
			<param-name>loginPassword</param-name>
			<param-value>admin</param-value>
		</init-param> -->
	</servlet>
	<servlet-mapping>
		<servlet-name>DruidStatView</servlet-name>
		<url-pattern>/druid/*</url-pattern>
	</servlet-mapping>

	<!-- 分发入口 -->
	<servlet>
		<servlet-name>applicationContext</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:config/springmvc/spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>applicationContext</servlet-name>
		<url-pattern>*.htm</url-pattern>
	</servlet-mapping>
	
	<!--URL伪静态-->
	<filter>
		<filter-name>UrlRewriteFilter</filter-name>
		<filter-class>
			org.tuckey.web.filters.urlrewrite.UrlRewriteFilter
		</filter-class>
		<!-- <init-param>
			<param-name>logLevel</param-name>
			<param-value>DEBUG</param-value>
			</init-param> -->
	</filter>
	<filter-mapping>
		<filter-name>UrlRewriteFilter</filter-name>
		<url-pattern>*.htm</url-pattern>
	</filter-mapping>
	<!-- 网页压缩过滤器 -->
	<filter>
		<filter-name>GZIPEncoder</filter-name>
		<filter-class>
			com.rt.shop.common.zip.CompressionFilter
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>GZIPEncoder</filter-name>
		<servlet-name>/shop</servlet-name>
	</filter-mapping>
	<!-- SSO过滤器 -->
	<!-- <filter>
		<filter-name>secondDomainFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.DelegatingFilterProxyDelegatingFilterProxy就是一个对于servlet filter的代理
		</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>secondDomainFilter</filter-name>
		<url-pattern>*.htm</url-pattern>
	</filter-mapping>
	商城过滤器
	<filter>
		<filter-name>shopFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.DelegatingFilterProxyDelegatingFilterProxy就是一个对于servlet filter的代理
		</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shopFilter</filter-name>
		<url-pattern>*.htm</url-pattern>
	</filter-mapping> -->
	<!--页面缓存配置
	<filter>
		<filter-name>SimplePageFragmentCachingFilter</filter-name>
		<filter-class>
			com.shopping.core.ehcache.PageCacheFiler
		</filter-class>
		<init-param>
			<param-name>patterns</param-name>
			<param-value>

			</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>SimplePageFragmentCachingFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>request</dispatcher>
		<dispatcher>forward</dispatcher>
		<dispatcher>include</dispatcher>
	</filter-mapping>-->
	<!-- 浏览器不支持put,delete等method,由该filter将/sys?_method=delete转换为标准的http delete方法 -->
	<!-- <filter> <filter-name>HiddenHttpMethodFilter</filter-name> <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class> 
		</filter> <filter-mapping> <filter-name>HiddenHttpMethodFilter</filter-name> 
		<servlet-name>applicationContext</servlet-name> </filter-mapping> -->

	<!-- session过期时间 -->
	<session-config>
		<session-timeout>20</session-timeout>
	</session-config>

	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>shop-web.root</param-value>
	</context-param>
	<listener>
		<listener-class>
			org.springframework.web.util.WebAppRootListener
		</listener-class>
	</listener>
	<error-page>
		<error-code>500</error-code>
		<location>/500.htm</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/404.htm</location>
	</error-page>
	<!-- MIME类型 -->
	<mime-mapping>
		<extension>doc</extension>
		<mime-type>application/msword</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>xls</extension>
		<mime-type>application/msexcel</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>pdf</extension>
		<mime-type>application/pdf</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>zip</extension>
		<mime-type>application/zip</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>rar</extension>
		<mime-type>application/rar</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>txt</extension>
		<mime-type>application/txt</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>chm</extension>
		<mime-type>application/mshelp</mime-type>
	</mime-mapping>

</web-app>